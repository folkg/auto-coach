name: Pull Request Checks and Preview

on:
  pull_request:
    branches:
      - main

concurrency:
  group: pr-${{ github.event.number }}
  cancel-in-progress: true

jobs:
  detect-changes:
    uses: ./.github/workflows/detect-changes.yml
    with:
      diff-base: main
      diff-head: HEAD

  test-and-build:
    uses: ./.github/workflows/test-build-upload.yml
    needs: detect-changes
    with:
      client-changed: ${{ needs.detect-changes.outputs.client-changed == 'true' }}
      api-functions-changed: ${{ needs.detect-changes.outputs.api-functions-changed == 'true' }}
      biome-version: "1.5.3"
      bun-version: "1.1.0"

  validate-infrastructure:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.infrastructure-changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: 1.6.0

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Validate Infrastructure
        working-directory: infrastructure/opentofu
        run: |
          tofu init
          tofu validate
          tofu plan \
            -var="project_id=${{ secrets.GCP_PROJECT_ID }}" \
            -var="firebase_project_id=${{ secrets.FIREBASE_PROJECT_ID }}" \
            -var="yahoo_app_id=${{ secrets.YAHOO_APP_ID }}" \
            -var="yahoo_client_id=${{ secrets.YAHOO_CLIENT_ID }}" \
            -var="environment=dev"

  test-api-functions:
    name: Test API and Functions
    runs-on: ubuntu-latest
    needs: [detect-changes, test-and-build]
    if: |
      always() &&
      needs.detect-changes.outputs.api-functions-changed == 'true' &&
      needs.test-and-build.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download API build artifacts
        uses: actions/download-artifact@v4
        with:
          name: api-build
          path: server/api/dist/

      - name: Download functions build artifacts
        uses: actions/download-artifact@v4
        with:
          name: functions-build
          path: server/functions/lib/

      - name: Setup Bun CLI
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Test API binary
        run: |
          # Make the binary executable
          chmod +x server/api/dist/server

          # Test that the binary runs
          timeout 10s server/api/dist/server || [ $? = 124 ]

      - name: Test container build
        run: |
          # Build container to ensure it works
          bun run container:build

          # Test container runs
          timeout 10s docker run --rm auto-coach-api || [ $? = 124 ]

      - name: Validate Firebase Functions
        run: |
          # Install Firebase CLI
          npm install -g firebase-tools

          # Validate functions configuration
          cd server/functions
          firebase functions:config:get --project ${{ secrets.FIREBASE_PROJECT_ID }}

  deploy-client-preview:
    name: Deploy Client Preview
    runs-on: ubuntu-latest
    needs: [detect-changes, test-and-build]
    if: |
      always() &&
      needs.detect-changes.outputs.client-changed == 'true' &&
      needs.test-and-build.result == 'success'
    environment: preview
    outputs:
      preview-url: ${{ steps.deploy.outputs.details_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download client build artifacts
        uses: actions/download-artifact@v4
        with:
          name: client-build
          path: client/dist/

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Rebuild client for preview with dev API URL
        run: |
          # Use development API URL for previews
          API_URL="https://auto-coach-api-dev-XXXXXXX-uc.a.run.app"
          echo "Building preview with API_URL: $API_URL"
          NG_APP_API_BASE_URL="$API_URL" bun run build:client

      - name: Deploy Preview to Firebase Hosting
        id: deploy
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_AUTO_GM_372620 }}
          projectId: ${{ secrets.FIREBASE_PROJECT_ID }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.api-functions-changed == 'true' ||
      needs.detect-changes.outputs.client-changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun CLI
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Run security audit
        run: bun audit

      - name: Check for known vulnerabilities
        run: |
          # Check for any high/critical vulnerabilities
          if bun audit --audit-level high; then
            echo "✅ No high/critical vulnerabilities found"
          else
            echo "❌ High/critical vulnerabilities detected"
            exit 1
          fi

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [detect-changes, test-and-build]
    if: |
      always() &&
      needs.detect-changes.outputs.client-changed == 'true' &&
      needs.test-and-build.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download client build artifacts
        uses: actions/download-artifact@v4
        with:
          name: client-build
          path: client/dist/

      - name: Setup Bun CLI
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli

      - name: Run Lighthouse CI
        run: |
          # Serve the built client locally
          cd client/dist/auto-gm/browser
          python3 -m http.server 8080 &
          SERVER_PID=$!

          # Wait for server to start
          sleep 5

          # Run Lighthouse
          lhci autorun --upload.target=temporary-public-storage --collect.url=http://localhost:8080

          # Cleanup
          kill $SERVER_PID

  update-pr-status:
    name: Update PR Status
    runs-on: ubuntu-latest
    needs: [
      detect-changes,
      test-and-build,
      validate-infrastructure,
      test-api-functions,
      deploy-client-preview,
      security-scan,
      performance-test
    ]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create status comment
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            // Find existing bot comment
            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('## 🚀 Pull Request Status')
            );

            // Determine component changes
            const apiChanged = '${{ needs.detect-changes.outputs.api-functions-changed }}' === 'true';
            const clientChanged = '${{ needs.detect-changes.outputs.client-changed }}' === 'true';
            const infraChanged = '${{ needs.detect-changes.outputs.infrastructure-changed }}' === 'true';

            // Determine job results
            const testResult = '${{ needs.test-and-build.result }}';
            const infraResult = '${{ needs.validate-infrastructure.result }}';
            const apiTestResult = '${{ needs.test-api-functions.result }}';
            const clientPreviewResult = '${{ needs.deploy-client-preview.result }}';
            const securityResult = '${{ needs.security-scan.result }}';
            const perfResult = '${{ needs.performance-test.result }}';

            // Create status indicators
            const getStatus = (result) => {
              switch(result) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'skipped': return '⏭️';
                default: return '⏳';
              }
            };

            let body = `## 🚀 Pull Request Status

            ### 📊 Changed Components
            ${apiChanged ? '🔧 **API & Functions**: Changed' : ''}
            ${clientChanged ? '🌐 **Client**: Changed' : ''}
            ${infraChanged ? '🏗️ **Infrastructure**: Changed' : ''}
            ${!apiChanged && !clientChanged && !infraChanged ? '📝 **No deployable changes detected**' : ''}

            ### 🧪 Test Results
            ${getStatus(testResult)} **Build & Test**: ${testResult}
            ${infraChanged ? `${getStatus(infraResult)} **Infrastructure Validation**: ${infraResult}` : ''}
            ${apiChanged ? `${getStatus(apiTestResult)} **API & Functions Test**: ${apiTestResult}` : ''}
            ${getStatus(securityResult)} **Security Scan**: ${securityResult}
            ${clientChanged ? `${getStatus(perfResult)} **Performance Test**: ${perfResult}` : ''}

            ### 🌍 Preview Deployments
            ${clientChanged && clientPreviewResult === 'success' ?
              `🌐 **Client Preview**: ${{ needs.deploy-client-preview.outputs.preview-url || 'Deployed' }}` :
              clientChanged ? '🌐 **Client Preview**: Failed to deploy' : ''
            }
            ${apiChanged ? '🔧 **API Preview**: Not deployed (requires manual infrastructure)' : ''}

            ### 📝 Next Steps
            ${testResult === 'success' ? '✅ All tests passed - Ready for review!' : '❌ Tests failed - Please fix before merging'}
            ${infraChanged ? '⚠️ Infrastructure changes detected - Will be applied on merge to main' : ''}

            *Updated: ${new Date().toISOString()}*
            `;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
