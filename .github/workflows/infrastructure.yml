name: Infrastructure Deployment

on:
  push:
    branches:
      - main
    paths:
      - 'infrastructure/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - dev
          - prod
        default: 'dev'
      dry_run:
        description: 'Perform a dry run (plan only)'
        required: false
        type: boolean
        default: false

concurrency:
  group: infrastructure-${{ github.event.inputs.environment || 'main' }}
  cancel-in-progress: false

jobs:
  validate:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.determine-env.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine environment
        id: determine-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          else
            echo "environment=prod" >> $GITHUB_OUTPUT
          fi

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: 1.6.0

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Validate configuration
        working-directory: infrastructure/opentofu
        run: |
          tofu init
          tofu validate
          tofu fmt -check

      - name: Security scan
        working-directory: infrastructure/opentofu
        run: |
          # Check for hardcoded secrets or sensitive data
          if grep -r "password\|secret\|key" --include="*.tf" --include="*.tfvars" . | grep -v "var\." | grep -v "#"; then
            echo "❌ Potential hardcoded secrets found"
            exit 1
          fi
          echo "✅ No hardcoded secrets detected"

  plan:
    name: Plan Infrastructure
    runs-on: ubuntu-latest
    needs: validate
    environment: ${{ needs.validate.outputs.environment == 'prod' && 'production' || 'development' }}
    outputs:
      plan-file: ${{ steps.plan.outputs.plan-file }}
      has-changes: ${{ steps.plan.outputs.has-changes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: 1.6.0

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Plan infrastructure changes
        id: plan
        working-directory: infrastructure/opentofu
        run: |
          ENV="${{ needs.validate.outputs.environment }}"
          PLAN_FILE="infrastructure-${ENV}-$(date +%s).tfplan"

          tofu init

          # Run plan
          if tofu plan \
            -var="project_id=${{ secrets.GCP_PROJECT_ID }}" \
            -var="firebase_project_id=${{ secrets.FIREBASE_PROJECT_ID }}" \
            -var="yahoo_app_id=${{ secrets.YAHOO_APP_ID }}" \
            -var="yahoo_client_id=${{ secrets.YAHOO_CLIENT_ID }}" \
            -var="environment=${ENV}" \
            -out="${PLAN_FILE}" \
            -detailed-exitcode; then

            PLAN_EXIT_CODE=$?
            if [[ $PLAN_EXIT_CODE -eq 2 ]]; then
              echo "has-changes=true" >> $GITHUB_OUTPUT
              echo "✅ Infrastructure changes detected"
            else
              echo "has-changes=false" >> $GITHUB_OUTPUT
              echo "ℹ️ No infrastructure changes detected"
            fi
          else
            echo "❌ Planning failed"
            exit 1
          fi

          echo "plan-file=${PLAN_FILE}" >> $GITHUB_OUTPUT

          # Show plan summary
          tofu show -no-color "${PLAN_FILE}"

      - name: Upload plan file
        if: steps.plan.outputs.has-changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ needs.validate.outputs.environment }}
          path: infrastructure/opentofu/${{ steps.plan.outputs.plan-file }}
          retention-days: 30

  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [validate, plan]
    if: |
      needs.plan.outputs.has-changes == 'true' &&
      (github.event.inputs.dry_run != 'true' || github.event.inputs.dry_run == '')
    environment: ${{ needs.validate.outputs.environment == 'prod' && 'production' || 'development' }}
    outputs:
      api-url: ${{ steps.apply.outputs.api-url }}
      container-registry: ${{ steps.apply.outputs.container-registry }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download plan file
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan-${{ needs.validate.outputs.environment }}
          path: infrastructure/opentofu/

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: 1.6.0

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Apply infrastructure changes
        id: apply
        working-directory: infrastructure/opentofu
        run: |
          tofu init

          # Apply the plan
          PLAN_FILE="${{ needs.plan.outputs.plan-file }}"
          tofu apply "${PLAN_FILE}"

          # Extract outputs
          API_URL=$(tofu output -raw api_url 2>/dev/null || echo "")
          CONTAINER_REGISTRY=$(tofu output -raw container_registry_url 2>/dev/null || echo "")

          echo "api-url=$API_URL" >> $GITHUB_OUTPUT
          echo "container-registry=$CONTAINER_REGISTRY" >> $GITHUB_OUTPUT

          echo "✅ Infrastructure deployment completed"
          echo "🔗 API URL: $API_URL"
          echo "🐳 Container Registry: $CONTAINER_REGISTRY"

      - name: Verify deployment
        run: |
          # Verify Cloud Run service is accessible
          if [[ -n "${{ steps.apply.outputs.api-url }}" ]]; then
            echo "🔍 Verifying API endpoint..."
            if curl -f "${{ steps.apply.outputs.api-url }}/health" > /dev/null 2>&1; then
              echo "✅ API endpoint is healthy"
            else
              echo "⚠️ API endpoint not responding (may be normal for new deployments)"
            fi
          fi

  post-deploy:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: [validate, deploy]
    if: always() && needs.deploy.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get current branch name
        id: branch
        run: echo "name=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_OUTPUT

      - name: Extract JIRA tag from branch name
        id: jira
        run: |
          BRANCH_NAME="${{ steps.branch.outputs.name }}"
          if [[ $BRANCH_NAME =~ (XM-[0-9]+) ]]; then
            echo "tag=[${BASH_REMATCH[1]}]" >> $GITHUB_OUTPUT
          else
            echo "tag=" >> $GITHUB_OUTPUT
          fi

      - name: Update deployment documentation
        run: |
          ENV="${{ needs.validate.outputs.environment }}"

          # Create or update infrastructure deployment log
          mkdir -p docs/deployments
          LOG_FILE="docs/deployments/infrastructure-${ENV}.md"

          cat > "$LOG_FILE" << EOF
          # Infrastructure Deployment Log - ${ENV^}

          ## Latest Deployment
          - **Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **Commit**: ${{ github.sha }}
          - **Environment**: ${ENV}
          - **Triggered by**: ${{ github.actor }}
          - **API URL**: ${{ needs.deploy.outputs.api-url }}
          - **Container Registry**: ${{ needs.deploy.outputs.container-registry }}

          ## Deployment History
          Previous deployments are tracked in git history.

          ---
          *This file is automatically updated by the infrastructure deployment workflow.*
          EOF

      - name: Commit deployment documentation
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/deployments/

          # Create commit message with JIRA tag if present
          ENV="${{ needs.validate.outputs.environment }}"
          JIRA_TAG="${{ steps.jira.outputs.tag }}"
          if [[ -n "$JIRA_TAG" ]]; then
            git commit -m "docs: ${JIRA_TAG} Update ${ENV} infrastructure deployment documentation"
          else
            git commit -m "docs: Update ${ENV} infrastructure deployment documentation"
          fi

          git push

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [validate, plan, deploy]
    if: always()
    steps:
      - name: Determine status
        id: status
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "message=✅ Infrastructure deployment completed successfully" >> $GITHUB_OUTPUT
          elif [[ "${{ needs.plan.outputs.has-changes }}" == "false" ]]; then
            echo "status=no-changes" >> $GITHUB_OUTPUT
            echo "message=ℹ️ No infrastructure changes detected" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
            echo "status=dry-run" >> $GITHUB_OUTPUT
            echo "message=🔍 Infrastructure dry run completed - no changes applied" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "message=❌ Infrastructure deployment failed" >> $GITHUB_OUTPUT
          fi



      - name: Summary
        run: |
          echo "## Infrastructure Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ needs.validate.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ steps.status.outputs.message }}" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "- **API URL**: ${{ needs.deploy.outputs.api-url }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Container Registry**: ${{ needs.deploy.outputs.container-registry }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
