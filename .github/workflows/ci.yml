name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      api-changed: ${{ steps.filter.outputs.api }}
      client-changed: ${{ steps.filter.outputs.client }}
      functions-changed: ${{ steps.filter.outputs.functions }}
      firestore-changed: ${{ steps.filter.outputs.firestore }}
      general-critical: ${{ steps.filter.outputs.general-critical }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get previous commit SHA
        id: prev-commit
        if: github.event_name == 'push'
        run: echo "sha=$(git rev-parse HEAD^)" >> $GITHUB_OUTPUT

      - name: Check changed paths
        uses: dorny/paths-filter@v3
        id: filter
        with:
          base: ${{ github.event_name == 'push' && steps.prev-commit.outputs.sha || github.base_ref }}
          filters: |
            api:
              - 'server/api/**'
              - 'server/core/**'
              - 'common/**'
              - 'infrastructure/opentofu/**'
            client:
              - 'client/**'
            functions:
              - 'server/functions/**'
              - 'server/core/**'
              - 'common/**'
            firestore:
              - 'firestore.rules'
              - 'firestore.indexes.json'
            general-critical:
              - 'infrastructure/**'
              - 'ops/**'
              - 'package.json'
              - 'tsconfig.base.json'
              - 'bunfig.toml'
              - '.github/workflows/**'

  test-and-build:
    name: Test & Build
    runs-on: ubuntu-latest
    needs: detect-changes
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Install Playwright Browsers
        run: bunx playwright install --with-deps chromium

      - name: Run checks
        run: bun run checks:ci

      - name: Build API binary
        if: needs.detect-changes.outputs.api-changed == 'true' || needs.detect-changes.outputs.general-critical == 'true'
        run: bun run build:api

      - name: Build client production bundle
        if: needs.detect-changes.outputs.client-changed == 'true' || needs.detect-changes.outputs.general-critical == 'true'
        run: bun run build:client

      - name: Verify builds before artifact upload
        if: always()
        run: |
          echo "API build:"
          ls -la server/api/dist/ || echo "API dist not found"
          echo "Functions build:"
          ls -la server/functions/lib/ || echo "functions lib not found"
          ls -la server/core/dist/ || echo "core dist not found"
          echo "Client build:"
          ls -la client/dist/auto-gm/browser/ || echo "client browser dist not found"

      - name: Authenticate to Google Cloud
        if: github.event_name == 'pull_request' && needs.detect-changes.outputs.functions-changed == 'true'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Validate Functions Deployment
        if: github.event_name == 'pull_request' && needs.detect-changes.outputs.functions-changed == 'true'
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        run: bun run deploy functions --env dev --dry-run --skip-build

      - name: Upload API build
        if: needs.detect-changes.outputs.api-changed == 'true' || needs.detect-changes.outputs.general-critical == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: api-build
          path: server/api/dist

      - name: Upload functions build
        if: needs.detect-changes.outputs.functions-changed == 'true' || needs.detect-changes.outputs.general-critical == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: functions-build
          path: |
            server/functions/lib/
            server/core/dist/

      - name: Upload client build
        if: needs.detect-changes.outputs.client-changed == 'true' || needs.detect-changes.outputs.general-critical == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: client-build
          path: client/dist/

  deploy-api-prod:
    name: Deploy API (Production)
    runs-on: ubuntu-latest
    needs: [detect-changes, test-and-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && (needs.detect-changes.outputs.api-changed == 'true' || needs.detect-changes.outputs.general-critical == 'true')
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download API build
        uses: actions/download-artifact@v4
        with:
          name: api-build
          path: server/api/dist

      - name: Verify API build
        run: |
          echo "Checking artifact download structure:"
          find server/api -type f || echo "nothing found in server/api"
          echo "Checking server/api/dist structure:"
          ls -la server/api/dist/ || echo "server/api/dist/ not found"
          test -f server/api/dist/server && echo "✓ server binary found" || echo "✗ server binary NOT found"

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: 1.6.0

      - name: Install dependencies
        run: bun install

      - name: Deploy API
        env:
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        run: |
          chmod +x server/api/dist/server
          bun run deploy api --env prod --version v${{ github.run_number }} --skip-build

  deploy-functions-prod:
    name: Deploy Functions (Production)
    runs-on: ubuntu-latest
    needs: [detect-changes, test-and-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && (needs.detect-changes.outputs.functions-changed == 'true' || needs.detect-changes.outputs.general-critical == 'true')
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download functions build
        uses: actions/download-artifact@v4
        with:
          name: functions-build
          path: .

      - name: Verify functions build
        run: |
          echo "Checking what was downloaded:"
          ls -la || echo "ls failed"
          echo "Looking for server directory:"
          find . -maxdepth 3 -type d -name server || echo "no server dir"
          echo "All files downloaded:"
          find . -type f | head -50 || echo "no files found"
          echo "Checking functions build structure:"
          ls -la server/functions/lib/ || echo "server/functions/lib/ not found"
          ls -la server/core/dist/ || echo "server/core/dist/ not found"

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Install dependencies
        run: bun install

      - name: Deploy Functions
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        run: bun run deploy functions --env prod --skip-build

  deploy-client-prod:
    name: Deploy Client (Production)
    runs-on: ubuntu-latest
    needs: [detect-changes, test-and-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && (needs.detect-changes.outputs.client-changed == 'true' || needs.detect-changes.outputs.general-critical == 'true')
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download client build
        uses: actions/download-artifact@v4
        with:
          name: client-build
          path: client/dist/

      - name: Verify client build
        run: |
          echo "Checking artifact download structure:"
          find client -type f -o -type d | head -20 || echo "nothing found in client"
          echo "Checking client/dist structure:"
          ls -la client/dist/ || echo "client/dist/ not found"
          ls -la client/dist/auto-gm/ || echo "client/dist/auto-gm/ not found"
          ls -la client/dist/auto-gm/browser/ || echo "client/dist/auto-gm/browser/ not found"

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Deploy Client
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        run: bun run deploy client --env prod --skip-build

  deploy-firestore-prod:
    name: Deploy Firestore (Production)
    runs-on: ubuntu-latest
    needs: [detect-changes, test-and-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.detect-changes.outputs.firestore-changed == 'true'
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Deploy Firestore
        env:
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        run: bun run deploy firestore --env prod

  summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-api-prod, deploy-functions-prod, deploy-client-prod, deploy-firestore-prod]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Create Summary
        run: |
          echo "# Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Component Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- API: ${{ needs.deploy-api-prod.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Functions: ${{ needs.deploy-functions-prod.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Client: ${{ needs.deploy-client-prod.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Firestore: ${{ needs.deploy-firestore-prod.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
